/* Backtracking method

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
*/


class Solution {
    
    private List<String> combos= new ArrayList<>();
    private Map<Character, String> letters= Map.of('2',"abc",'3',"def",'4',"ghi",'5',"jkl",'6',"mno",'7',"pqrs",'8',"tuv",'9',"wxyz");
    private String phoneDigits;
    
    public List<String> letterCombinations(String digits) {
        
        if(digits.length()==0){

        return combos;
        }
        
        phoneDigits=digits;
        backtrack(0, new StringBuilder());
        return combos;
        
    }
    
    
    private void backtrack(int index, StringBuilder path){

    if(path.length()==phoneDigits.length()){
    combos.add(path.toString());
        return;
    }
        
        String lettersMapped= letters.get(phoneDigits.charAt(index));
        for(char letter: lettersMapped.toCharArray()){
            
            path.append(letter);
            backtrack(index+1,path);
            path.deleteCharAt(path.length()-1);
        }
    
    }
}
