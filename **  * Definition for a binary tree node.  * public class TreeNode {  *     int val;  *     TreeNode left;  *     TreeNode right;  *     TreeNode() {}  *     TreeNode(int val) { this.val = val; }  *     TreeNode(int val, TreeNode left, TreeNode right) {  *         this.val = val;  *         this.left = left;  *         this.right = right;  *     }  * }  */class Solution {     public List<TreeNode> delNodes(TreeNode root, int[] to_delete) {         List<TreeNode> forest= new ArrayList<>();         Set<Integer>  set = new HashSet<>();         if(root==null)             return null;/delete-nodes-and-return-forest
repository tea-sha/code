/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {
        List<TreeNode> forest= new ArrayList<>();
        Set<Integer>  set = new HashSet<>();
        if(root==null)
            return null;
       // Arrays.stream(to_delete).forEach(s->set.add(s));
        for(int i:to_delete){
               set.add(i);

        }
        del(forest, set,root);
        if(!set.contains(root))
        {
            forest.add(root);
        }
        return forest;
        
    }
    
    
    private TreeNode del(List<TreeNode> forest, Set<Integer> set, TreeNode node){
        
        if (node==null)
            return null;
        
        node.left=del(forest, set,node.left);
        node.right= del(forest,set, node.right);
        
        if(set.contains(node.val))
        {
            if(node.left!=null) forest.add(node.left);
            if(node.right!=null) forest.add(node.right);
            return null;
        }
        
        
       return node; 
        
        
    }
}
